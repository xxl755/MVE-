//// Created by caoqi on 2018/10/08.///* * Copyright (C) 2015, Simon Fuhrmann * TU Darmstadt - Graphics, Capture and Massively Parallel Computing * All rights reserved. * * This software may be modified and distributed under the terms * of the BSD 3-Clause license. See the LICENSE.txt file for details. */#include <iomanip>#include <iostream>#include <cstdlib>#include "mvs/settings.h"#include "mvs/dmrecon.h"#include "core/scene.h"#include "core/view.h"#include "util/timer.h"#include "util/arguments.h"#include "util/system.h"#include "util/tokenizer.h"#include "util/file_system.h"struct AppSettings{    std::string scene_path;    std::string ply_dest = "recon";    int master_id = -1;//重建视角    std::vector<int> view_ids;    int max_pixels = 1500000;    bool force_recon = false;    bool write_ply = false;    mvs::Settings mvs;    /*参考视角id：refViewNr；图片插入名：undistorted；patchsize：filterWidth；最小置信度阈值：minNCC；     * 视差，minParallax，视角置信度阈值：acceptNCC，重投影误差限制：minRefineDiff，种子点估计迭代次数：     * maxIterations，局部个数：nrReconNeighbors     * aabbMin，aabbMax种子点序列     *     * */};intmain (int argc, char** argv){    if(argc<4){        std::cout<<"usage: scendir scale view_id"<<std::endl;        return -1;    }    AppSettings conf;        // 场景文件夹    conf.scene_path = argv[1];    // 获取图像尺度，2：下采样2倍    std::stringstream stream1(argv[2]);    stream1>>conf.mvs.scale;    // 获取重建视角id 0：获取第0个视角    std::stringstream stream2(argv[3]);    stream2>>conf.master_id;        /* Load MVE scene. */    std::cout<<"Loading scene..."<<std::endl;    core::Scene::Ptr scene;//共享指针    try {//类静态方法创建scene        scene = core::Scene::create(conf.scene_path);//共享指针传入新scene类地址，传入scene_path，后初始化视角（meta_data的camera存放扭曲为0的相机内外参）        ////scene中basedir传入路径path，Scene中view向量填充【meta_data(camera:相机信息)images向量（图片名），path（图片路径）】        scene->get_bundle();//"synth_0.out"文件，bundle：camera读取其中视角相机内外参，feature三维点位置（pos）颜色（color）与refs【对应视角索引、二维点索引，位置初始-1】    }    catch (std::exception& e) {        std::cerr << "Error loading scene: " << e.what() << std::endl;        return EXIT_FAILURE;    }    /* Settings for Multi-view stereo */    conf.mvs.writePlyFile = conf.write_ply;    conf.mvs.plyPath = util::fs::join_path(conf.scene_path, conf.ply_dest);    //std::cout<<"writing ply file to "<<conf.mvs.plyPath<<std::endl;    util::WallTimer timer;    if (conf.master_id >= 0) {        std::cout << "Reconstructing view ID " << conf.master_id << std::endl;        conf.mvs.refViewNr = (std::size_t)conf.master_id;        try {            // start reconstruction，recon具备scene【views，bundle（cameras，feature）】与views（初始化的多种图，camPos，worldTOcam，对应view，scene，img_pyramid）            mvs::DMRecon recon(scene, conf.mvs);            recon.start();        }        catch (std::exception &err)        {            std::cerr << err.what() << std::endl;            return EXIT_FAILURE;        }    }    std::cout << "Reconstruction took "              << timer.get_elapsed() << "ms." << std::endl;    /* Save scene */    std::cout << "Saving views back to disc..." << std::endl;    scene->save_views();    return EXIT_SUCCESS;}